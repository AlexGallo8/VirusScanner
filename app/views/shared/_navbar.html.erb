<style>
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  @keyframes slideDown {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  .animate-fade-in { animation: fadeIn 0.5s ease-out; }
  .animate-slide-down { animation: slideDown 0.5s ease-out; }
</style>

<nav class="bg-white shadow-md">
  <div class="container mx-auto px-4 py-3">
    <div class="flex justify-between items-center">
      <%= link_to root_path, class: "flex items-center" do %>
        <%= image_tag("logo_vs.png", class: "w-16 h-auto") %>
      <% end %>

      <button class="lg:hidden" id="mobile-menu-button">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
        </svg>
      </button>

      <div class="hidden lg:flex items-center space-x-4">
        <%= link_to "Home", root_path, class: "text-gray-700 hover:text-gray-900" %>
        <%= link_to "About", about_path, class: "text-gray-700 hover:text-gray-900" %>
        
        <div class="hidden lg:flex items-center space-x-4 login-buttons">
          <% if current_user.present? %>
            <div id="user-button" data-clerk-component="userButton"></div>
          <% else %>
            <button onclick="Clerk.openSignIn()">Sign in</button>
            <button onclick="Clerk.openSignUp()">Sign up</button>
          <% end %>
        </div>
      </div>
    </div>

    <div class="lg:hidden">
      <div class="hidden pt-2 pb-3 space-y-1" id="mobile-menu">
        <%= link_to "Home", root_path, class: "block px-3 py-2 rounded-md text-base font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50" %>
        <%= link_to "About", about_path, class: "block px-3 py-2 rounded-md text-base font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50" %>
        
        <% if current_user.present? %>
          <div class="px-3 py-2">
            <div id="mobile-user-button" data-clerk-component="userButton"></div>
          </div>
        <% else %>
          <button 
            onclick="Clerk.openSignIn()" 
            class="block w-full px-3 py-2 rounded-md text-base font-medium bg-black text-white hover:bg-gray-800"
          >
            Sign in
          </button>
          <button 
            onclick="Clerk.openSignUp()" 
            class="block w-full px-3 py-2 rounded-md text-base font-medium bg-gray-200 text-black hover:bg-gray-300"
          >
            Sign up
          </button>
        <% end %>
      </div>    
    </div>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    mobileMenuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
      mobileMenu.classList.toggle('animate-slide-down');
    });
  });
</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // Funzione per aggiungere form di login e signup locali
  function injectLocalAuthForms() {
    const observeClerkModal = () => {
      const clerkModal = document.querySelector('.cl-rootBox');
      
      if (clerkModal) {
        // Controlla se abbiamo gi√† iniettato i form
        if (document.getElementById('local-auth-container')) return;

        // Trova il contenitore dei metodi di login/signup di Clerk
        const clerkSignInMethods = clerkModal.querySelector('.cl-signIn-start, .cl-signUp-start');
        
        if (clerkSignInMethods) {
          // Crea un contenitore per i nostri form di autenticazione locali
          const localAuthContainer = document.createElement('div');
          localAuthContainer.id = 'local-auth-container';
          localAuthContainer.innerHTML = `
            <div class="custom-local-auth-divider">
              <div class="divider-line"></div>
              <span class="divider-text">Or continue with local auth</span>
              <div class="divider-line"></div>
            </div>
            
            <!-- Form di Login Locale -->
            <form id="local-login-form" class="custom-local-auth-form ${window.clerkAuthMode === 'signin' ? '' : 'hidden'}">
              <div class="form-group">
                <label for="local-login-email">Email</label>
                <input 
                  type="email" 
                  id="local-login-email" 
                  name="email" 
                  required 
                  class="clerk-input"
                >
              </div>
              
              <div class="form-group">
                <label for="local-login-password">Password</label>
                <input 
                  type="password" 
                  id="local-login-password" 
                  name="password" 
                  required 
                  class="clerk-input"
                >
              </div>
              
              <button 
                type="submit" 
                class="clerk-local-auth-button"
              >
                Sign In
              </button>
            </form>

            <!-- Form di Signup Locale -->
            <form id="local-signup-form" class="custom-local-auth-form ${window.clerkAuthMode === 'signup' ? '' : 'hidden'}">
              <div class="form-group">
                <label for="local-signup-email">Email</label>
                <input 
                  type="email" 
                  id="local-signup-email" 
                  name="email" 
                  required 
                  class="clerk-input"
                >
              </div>
              
              <div class="form-group">
                <label for="local-signup-password">Password</label>
                <input 
                  type="password" 
                  id="local-signup-password" 
                  name="password" 
                  required 
                  class="clerk-input"
                >
              </div>
              
              <div class="form-group">
                <label for="local-signup-confirm-password">Confirm Password</label>
                <input 
                  type="password" 
                  id="local-signup-confirm-password" 
                  name="confirm_password" 
                  required 
                  class="clerk-input"
                >
              </div>
              
              <button 
                type="submit" 
                class="clerk-local-auth-button"
              >
                Sign Up
              </button>
            </form>
          `;

          // Inserisci il contenitore dopo i metodi di login/signup di Clerk
          clerkSignInMethods.after(localAuthContainer);

          // Gestore per il submit del form di login
          const localLoginForm = document.getElementById('local-login-form');
          localLoginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('local-login-email').value;
            const password = document.getElementById('local-login-password').value;

            try {
              const response = await fetch('/local_login', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ email, password })
              });

              if (response.ok) {
                const data = await response.json();
                // Usa il token per il login tramite Clerk
                Clerk.client.session.create({
                  token: data.clerk_token,
                  options: {
                    // Opzioni aggiuntive se necessario
                  }
                });
              } else {
                const errorData = await response.json();
                showLocalAuthError(localLoginForm, errorData.message || 'Login failed');
              }
            } catch (error) {
              console.error('Login error:', error);
              showLocalAuthError(localLoginForm, 'An error occurred during login');
            }
          });

          // Gestore per il submit del form di signup
          const localSignupForm = document.getElementById('local-signup-form');
          localSignupForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('local-signup-email').value;
            const password = document.getElementById('local-signup-password').value;
            const confirmPassword = document.getElementById('local-signup-confirm-password').value;

            // Verifica corrispondenza password
            if (password !== confirmPassword) {
              showLocalAuthError(localSignupForm, 'Passwords do not match');
              return;
            }

            try {
              const response = await fetch('/local_signup', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ email, password })
              });

              if (response.ok) {
                const data = await response.json();
                // Usa il token per il login tramite Clerk
                Clerk.client.session.create({
                  token: data.clerk_token,
                  options: {
                    // Opzioni aggiuntive se necessario
                  }
                });
              } else {
                const errorData = await response.json();
                showLocalAuthError(localSignupForm, errorData.message || 'Signup failed');
              }
            } catch (error) {
              console.error('Signup error:', error);
              showLocalAuthError(localSignupForm, 'An error occurred during signup');
            }
          });

          // Funzione per mostrare errori nel form
          function showLocalAuthError(form, message) {
            // Rimuovi eventuali errori precedenti
            const existingError = form.querySelector('.local-auth-error');
            if (existingError) existingError.remove();

            // Crea e aggiungi nuovo messaggio di errore
            const errorContainer = document.createElement('div');
            errorContainer.className = 'local-auth-error';
            errorContainer.textContent = message;
            form.prepend(errorContainer);
          }
        }
      } else {
        // Se il modale non √® ancora caricato, riprova dopo un breve intervallo
        setTimeout(observeClerkModal, 100);
      }
    };

    // Avvia l'osservazione
    observeClerkModal();
  }

  // Sovrascrivi i metodi openSignIn e openSignUp di Clerk
  const originalOpenSignIn = Clerk.openSignIn;
  Clerk.openSignIn = function(...args) {
    // Imposta la modalit√† di autenticazione
    window.clerkAuthMode = 'signin';
    
    // Chiama il metodo originale
    originalOpenSignIn.apply(this, args);
    
    // Inietta i form locali
    setTimeout(injectLocalAuthForms, 100);
  };

  const originalOpenSignUp = Clerk.openSignUp;
  Clerk.openSignUp = function(...args) {
    // Imposta la modalit√† di autenticazione
    window.clerkAuthMode = 'signup';
    
    // Chiama il metodo originale
    originalOpenSignUp.apply(this, args);
    
    // Inietta i form locali
    setTimeout(injectLocalAuthForms, 100);
  };
});
</script>

<style>
/* Stili per integrare i form di autenticazione locali nel modale di Clerk */
#local-auth-container {
  width: 100%;
  padding: 0 20px;
  box-sizing: border-box;
}

.custom-local-auth-divider {
  display: flex;
  align-items: center;
  margin: 20px 0;
}

.divider-line {
  flex-grow: 1;
  height: 1px;
  background-color: #e0e0e0;
}

.divider-text {
  margin: 0 10px;
  color: #888;
  font-size: 0.8em;
}

.custom-local-auth-form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.custom-local-auth-form.hidden {
  display: none;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-group label {
  margin-bottom: 5px;
  font-weight: 500;
}

.clerk-input {
  padding: 10px;
  border: 1px solid #d1d5db;
  border-radius: 4px;
  font-size: 14px;
}

.clerk-local-auth-button {
  padding: 10px;
  background-color: #000;
  color: white;
  border: none;
  border-radius: 4px;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s;
}

.clerk-local-auth-button:hover {
  background-color: #333;
}

.local-auth-error {
  color: red;
  text-align: center;
  margin-bottom: 10px;
  font-size: 0.9em;
}
</style>